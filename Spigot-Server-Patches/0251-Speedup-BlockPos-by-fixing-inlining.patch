From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@outlook.com>
Date: Wed, 30 Nov 2016 20:56:58 -0600
Subject: [PATCH] Speedup BlockPos by fixing inlining

Normally the JVM can inline virtual getters by having two sets of code, one is the 'optimized' code and the other is the 'deoptimized' code.
If a single type is used 99% of the time, then its worth it to inline, and to revert to 'deoptimized' the 1% of the time we encounter other types.
But if two types are encountered commonly, then the JVM can't inline them both, and the call overhead remains.

This scenario also occurs with BlockPos and MutableBlockPos.
The variables in BlockPos are final, so MutableBlockPos can't modify them.
MutableBlockPos fixes this by adding custom mutable variables, and overriding the getters to access them.

This approach with utility methods that operate on MutableBlockPos and BlockPos.
Specific examples are BlockPosition.up(), and World.isValidLocation().
It makes these simple methods much slower than they need to be.

This should result in an across the board speedup in anything that accesses blocks or does logic with positions.

This is based upon conclusions drawn from inspecting the assenmbly generated bythe JIT compiler on my mircorbenchmarks.
They had 'callq' (invoke) instead of 'mov' (get from memory) instructions.

diff --git a/src/main/java/net/minecraft/server/BaseBlockPosition.java b/src/main/java/net/minecraft/server/BaseBlockPosition.java
index 71089442c189336fc0061852a661581784a64013..c439a8d0191c8667c881b2111b8c640ca13e5e7c 100644
--- a/src/main/java/net/minecraft/server/BaseBlockPosition.java
+++ b/src/main/java/net/minecraft/server/BaseBlockPosition.java
@@ -7,25 +7,22 @@ import javax.annotation.concurrent.Immutable;
 public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
 
     public static final BaseBlockPosition ZERO = new BaseBlockPosition(0, 0, 0);
-    @Deprecated
-    private final int a;
-    @Deprecated
-    private final int b;
-    @Deprecated
-    private final int c;
     // Paper start
+    protected int x;
+    protected int y;
+    protected int z;
     public boolean isValidLocation() {
-        return a >= -30000000 && c >= -30000000 && a < 30000000 && c < 30000000 && b >= 0 && b < 256;
+        return x >= -30000000 && z >= -30000000 && x < 30000000 && z < 30000000 && y >= 0 && y < 256;
     }
     public boolean isInvalidYLocation() {
-        return b < 0 || b >= 256;
+        return y < 0 || y >= 256;
     }
     // Paper end
 
     public BaseBlockPosition(int i, int j, int k) {
-        this.a = i;
-        this.b = j;
-        this.c = k;
+        this.x = i;
+        this.y = j;
+        this.z = k;
     }
 
     public BaseBlockPosition(double d0, double d1, double d2) {
@@ -52,16 +49,17 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
         return this.getY() == baseblockposition.getY() ? (this.getZ() == baseblockposition.getZ() ? this.getX() - baseblockposition.getX() : this.getZ() - baseblockposition.getZ()) : this.getY() - baseblockposition.getY();
     }
 
-    public int getX() {
-        return this.a;
+    // Paper start
+    public final int getX() {
+        return this.x;
     }
 
     public int getY() {
-        return this.b;
+        return this.y;
     }
 
     public int getZ() {
-        return this.c;
+        return this.z;
     }
 
     public BaseBlockPosition down() {
@@ -75,13 +73,14 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
     public BaseBlockPosition shift(EnumDirection enumdirection, int i) {
         return i == 0 ? this : new BaseBlockPosition(this.getX() + enumdirection.getAdjacentX() * i, this.getY() + enumdirection.getAdjacentY() * i, this.getZ() + enumdirection.getAdjacentZ() * i);
     }
+    // Paper end
 
     public BaseBlockPosition d(BaseBlockPosition baseblockposition) {
         return new BaseBlockPosition(this.getY() * baseblockposition.getZ() - this.getZ() * baseblockposition.getY(), this.getZ() * baseblockposition.getX() - this.getX() * baseblockposition.getZ(), this.getX() * baseblockposition.getY() - this.getY() * baseblockposition.getX());
     }
 
     public boolean a(BaseBlockPosition baseblockposition, double d0) {
-        return this.distanceSquared((double) baseblockposition.getX(), (double) baseblockposition.getY(), (double) baseblockposition.getZ(), false) < d0 * d0;
+        return this.distanceSquared((double) baseblockposition.x, (double) baseblockposition.y, (double) baseblockposition.z, false) < d0 * d0; // Paper
     }
 
     public boolean a(IPosition iposition, double d0) {
@@ -106,9 +105,9 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
     }
 
     public int n(BaseBlockPosition baseblockposition) {
-        float f = (float) Math.abs(baseblockposition.getX() - this.getX());
-        float f1 = (float) Math.abs(baseblockposition.getY() - this.getY());
-        float f2 = (float) Math.abs(baseblockposition.getZ() - this.getZ());
+        float f = (float) Math.abs(baseblockposition.getX() - this.x); // Paper
+        float f1 = (float) Math.abs(baseblockposition.getY() - this.y); // Paper
+        float f2 = (float) Math.abs(baseblockposition.getZ() - this.z); // Paper
 
         return (int) (f + f1 + f2);
     }
diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
index 01ee84853da9b4c1e8cb9b49fc4d3d6c04110d67..0328eb1ed73c975ae7720267a59f707ee20ac9f4 100644
--- a/src/main/java/net/minecraft/server/BlockPosition.java
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -343,11 +343,13 @@ public class BlockPosition extends BaseBlockPosition implements MinecraftSeriali
     }
 
     public static class MutableBlockPosition extends BlockPosition {
-
+        // Paper start - comment out
+        /*
         protected int b;
         protected int c;
         protected int d;
-
+        */
+        // Paper end
         public MutableBlockPosition() {
             this(0, 0, 0);
         }
@@ -357,10 +359,13 @@ public class BlockPosition extends BaseBlockPosition implements MinecraftSeriali
         }
 
         public MutableBlockPosition(int i, int j, int k) {
-            super(0, 0, 0);
+            // Paper start
+            super(i, j, k);
+            /*
             this.b = i;
             this.c = j;
-            this.d = k;
+            this.d = k;*/
+            // Paper end
         }
 
         public MutableBlockPosition(double d0, double d1, double d2) {
@@ -391,6 +396,9 @@ public class BlockPosition extends BaseBlockPosition implements MinecraftSeriali
             return super.a(enumblockrotation).immutableCopy();
         }
 
+
+        /*
+        // Paper start - use parent getters
         @Override
         public int getX() {
             return this.b;
@@ -404,13 +412,16 @@ public class BlockPosition extends BaseBlockPosition implements MinecraftSeriali
         @Override
         public int getZ() {
             return this.d;
-        }
+        }*/
+        // Paper end
 
         @com.destroystokyo.paper.util.annotation.ObfuscateHelper("setValues") // Paper - OBFHELPER
         public BlockPosition.MutableBlockPosition d(int i, int j, int k) {
-            this.b = i;
-            this.c = j;
-            this.d = k;
+            // Paper start - use xyz
+            this.x = i;
+            this.y = j;
+            this.z = k;
+            // Paper end
             return this;
         }
 
@@ -440,26 +451,26 @@ public class BlockPosition extends BaseBlockPosition implements MinecraftSeriali
         }
 
         public BlockPosition.MutableBlockPosition c(EnumDirection enumdirection, int i) {
-            return this.d(this.b + enumdirection.getAdjacentX() * i, this.c + enumdirection.getAdjacentY() * i, this.d + enumdirection.getAdjacentZ() * i);
+            return this.d(this.x + enumdirection.getAdjacentX() * i, this.y + enumdirection.getAdjacentY() * i, this.z + enumdirection.getAdjacentZ() * i);
         }
 
         public BlockPosition.MutableBlockPosition e(int i, int j, int k) {
-            return this.d(this.b + i, this.c + j, this.d + k);
+            return this.d(this.x + i, this.y + j, this.z + k);
         }
 
         @com.destroystokyo.paper.util.annotation.ObfuscateHelper("setX") // Paper - OBFHELPER
         public void o(int i) {
-            this.b = i;
+            this.x = i; // Paper change to x
         }
 
         @com.destroystokyo.paper.util.annotation.ObfuscateHelper("setY") // Paper - OBFHELPER
         public void p(int i) {
-            this.c = i;
+            this.y = i; // Paper change to y
         }
 
         @com.destroystokyo.paper.util.annotation.ObfuscateHelper("setZ") // Paper - OBFHELPER
         public void q(int i) {
-            this.d = i;
+            this.z = i; // Paper change to z
         }
 
         @Override
